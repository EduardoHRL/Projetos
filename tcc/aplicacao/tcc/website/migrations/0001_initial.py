# Generated by Django 5.1.7 on 2025-05-28 13:20

import cpf_field.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import website.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipamentos',
            fields=[
                ('equip_codigo', models.AutoField(db_column='equip_codigo', primary_key=True, serialize=False)),
                ('equip_nome', models.CharField(db_column='equip_nome', max_length=30)),
                ('equip_descricao', models.TextField(db_column='equip_descricao')),
            ],
            options={
                'db_table': 'tbl_equipamentos',
            },
        ),
        migrations.CreateModel(
            name='Escola',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('logo', models.ImageField(blank=True, default='sem_foto.jpeg', null=True, upload_to='uploads/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('cep', models.CharField(max_length=10, unique=True)),
                ('cidade', models.CharField(max_length=255)),
                ('estado', models.CharField(max_length=2)),
                ('bairro', models.CharField(blank=True, max_length=255)),
                ('endereco', models.CharField(max_length=255)),
                ('telefone', models.CharField(blank=True, max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('horario_inicio', models.TimeField(blank=True, null=True)),
                ('horario_fim', models.TimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tbl_escola',
            },
        ),
        migrations.CreateModel(
            name='Usuarios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('cpf', cpf_field.models.CPFField(max_length=14, verbose_name='cpf')),
                ('telefone', models.CharField(max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'tbl_usuarios',
            },
            managers=[
                ('objects', website.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LaboratorioEquipamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField(default=0)),
                ('equipamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.equipamentos')),
            ],
        ),
        migrations.CreateModel(
            name='Laboratorios',
            fields=[
                ('lab_codigo', models.AutoField(db_column='lab_codigo', primary_key=True, serialize=False)),
                ('lab_nome', models.CharField(db_column='lab_nome', max_length=255)),
                ('lab_descricao', models.TextField(blank=True, db_column='lab_descricao', null=True)),
                ('lab_capacidade', models.IntegerField(db_column='lab_capacidade')),
                ('lab_status', models.CharField(choices=[('disponivel', 'Disponível'), ('usando', 'Em uso'), ('indisponivel', 'Indisponível')], db_column='lab_status', default='disponivel', max_length=20)),
                ('lab_foto', models.ImageField(blank=True, default='icone_sala_aula.jpeg', null=True, upload_to='uploads/')),
                ('lab_equipamento', models.ManyToManyField(through='website.LaboratorioEquipamento', to='website.equipamentos')),
            ],
            options={
                'db_table': 'tbl_laboratorios',
            },
        ),
        migrations.AddField(
            model_name='laboratorioequipamento',
            name='laboratorio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.laboratorios'),
        ),
        migrations.CreateModel(
            name='Disponibilidade',
            fields=[
                ('hor_codigo', models.AutoField(db_column='hor_codigo', primary_key=True, serialize=False)),
                ('hor_inicio', models.TimeField(db_column='hor_inicio')),
                ('hor_fim', models.TimeField(db_column='hor_fim')),
                ('hor_diasDisponiveis', models.CharField(blank=True, db_column='hor_diasDisponiveis', help_text="Dias da semana disponíveis (ex.: '0,1,2' para segunda, terça, quarta)", max_length=13, null=True)),
                ('laboratorio', models.ForeignKey(db_column='lab_codigo', on_delete=django.db.models.deletion.CASCADE, related_name='disponibilidades', to='website.laboratorios')),
            ],
            options={
                'db_table': 'tbl_horario_reserva',
            },
        ),
        migrations.CreateModel(
            name='Reservas',
            fields=[
                ('res_codigo', models.AutoField(db_column='res_codigo', primary_key=True, serialize=False)),
                ('res_inicio', models.DateTimeField(db_column='res_inicio')),
                ('res_fim', models.DateTimeField(db_column='res_fim')),
                ('res_repeticao', models.CharField(choices=[('N', 'Não repetir'), ('D', 'Diariamente'), ('S', 'Semanalmente'), ('M', 'Mensalmente'), ('A', 'Anualmente')], db_column='res_repeticao', default='N', max_length=1)),
                ('res_status', models.CharField(db_column='res_status', max_length=45)),
                ('res_intervalo_semanas', models.PositiveIntegerField(blank=True, db_column='res_intervalo_semanas', null=True)),
                ('res_dia_semana', models.CharField(blank=True, help_text='Dias para repetição semanal (0=Segunda, 6=Domingo)', max_length=13, null=True)),
                ('res_data_final_repeticao', models.DateField(blank=True, db_column='res_data_final_repeticao', null=True)),
                ('res_descricao', models.TextField(blank=True, db_column='res_descricao')),
                ('laboratorio', models.ForeignKey(db_column='lab_codigo_res', on_delete=django.db.models.deletion.CASCADE, related_name='laboratorio_reservas', to='website.laboratorios')),
                ('professor', models.ForeignKey(db_column='professor_codigo_reserva', on_delete=django.db.models.deletion.CASCADE, related_name='professor', to=settings.AUTH_USER_MODEL)),
                ('res_repeticao_original', models.ForeignKey(blank=True, db_column='res_repeticao_original', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='repeticoes', to='website.reservas')),
            ],
            options={
                'db_table': 'tbl_reservas',
            },
        ),
        migrations.CreateModel(
            name='HistoricalReservas',
            fields=[
                ('res_codigo', models.IntegerField(blank=True, db_column='res_codigo', db_index=True)),
                ('res_inicio', models.DateTimeField(db_column='res_inicio')),
                ('res_fim', models.DateTimeField(db_column='res_fim')),
                ('res_repeticao', models.CharField(choices=[('N', 'Não repetir'), ('D', 'Diariamente'), ('S', 'Semanalmente'), ('M', 'Mensalmente'), ('A', 'Anualmente')], db_column='res_repeticao', default='N', max_length=1)),
                ('res_status', models.CharField(db_column='res_status', max_length=45)),
                ('res_intervalo_semanas', models.PositiveIntegerField(blank=True, db_column='res_intervalo_semanas', null=True)),
                ('res_dia_semana', models.CharField(blank=True, help_text='Dias para repetição semanal (0=Segunda, 6=Domingo)', max_length=13, null=True)),
                ('res_data_final_repeticao', models.DateField(blank=True, db_column='res_data_final_repeticao', null=True)),
                ('res_descricao', models.TextField(blank=True, db_column='res_descricao')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('professor', models.ForeignKey(blank=True, db_column='professor_codigo_reserva', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('laboratorio', models.ForeignKey(blank=True, db_column='lab_codigo_res', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='website.laboratorios')),
                ('res_repeticao_original', models.ForeignKey(blank=True, db_column='res_repeticao_original', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='website.reservas')),
            ],
            options={
                'verbose_name': 'historical reservas',
                'verbose_name_plural': 'historical reservass',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='laboratorioequipamento',
            unique_together={('laboratorio', 'equipamento')},
        ),
    ]
